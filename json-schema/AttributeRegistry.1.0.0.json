{
  "$ref": "#/definitions/AttributeRegistry",
  "$schema": "http://redfish.dmtf.org/schemas/v1/redfish-schema.1.0.0.json",
  "copyright": "Copyright 2016 Distributed Management Task Force, Inc. (DMTF). All rights reserved.",
  "description": "This is the schema definition for Attribute Registries. It represents the properties for the registries themselves.",
  "longDescription": "This resource shall be used to represent an Attribute registry for a Redfish implementation.",
  "properties": {
    "@odata.context": {
      "$ref": "http://redfish.dmtf.org/schemas/v1/odata.4.0.0.json#/definitions/context"
    },
    "@odata.id": {
      "$ref": "http://redfish.dmtf.org/schemas/v1/odata.4.0.0.json#/definitions/id"
    },
    "@odata.type": {
      "$ref": "http://redfish.dmtf.org/schemas/v1/odata.4.0.0.json#/definitions/type"
    },
    "Description": {
      "$ref": "http://redfish.dmtf.org/schemas/v1/Resource.json#/definitions/Description"
    },
    "Id": {
      "$ref": "http://redfish.dmtf.org/schemas/v1/Resource.json#/definitions/Id"
    },
    "Language": {
      "description": "This is the RFC 5646 compliant language code for the registry.",
      "longDescription": "The value of this property shall be a string consisting of an RFC 5646 language code",
      "readonly": true,
      "type": "string"
    },
    "Name": {
      "$ref": "http://redfish.dmtf.org/schemas/v1/Resource.json#/definitions/Name"
    },
    "Oem": {
      "$ref": "http://redfish.dmtf.org/schemas/v1/Resource.json#/definitions/Oem",
      "description": "This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.",
      "longDescription": "The value of this string shall be of the format for the reserved word *Oem*."
    },
    "OwningEntity": {
      "description": "This is the organization or company that publishes this registry.",
      "longDescription": "The value of this property shall be a string that represents the publisher of this registry.",
      "readonly": true,
      "type": "string"
    },
    "RegistryVersion": {
      "description": "This is the message registry version which is used in the middle portion of a messageID.",
      "longDescription": "The value of this property shall be the version of this message registry. The format of this string shall be of the format majorversion.minorversion.errata in compliance with Protocol Version section of the Redfish specification.",
      "readonly": true,
      "type": "string"
    },
    "SupportedSystems": {
    "additionalProperties": false,
    "description": "Array of systems supported by this attribute registry.",
      "longDescription": "The value of this property shall be an array containing a list of systems supported by this attribute registry.",
      "items": {
        "additionalProperties": false,
        "properties": {
          "ProductName": {
            "description": "The product name of the system.",
            "longDescription": "The value of this property shall be the product name of the computer system that this registry applies to.",
            "type": "string"
          },
          "SystemId": {
            "description": "The system ID of the system.",
            "longDescription": "The value of this property shall be the system ID that identifies the computer system model that this registry applies to.",
            "pattern": "^[A-Za-z0-9]+$",
            "type": "string"
          },
          "FirmwareVersion": {
            "description": "Firmware version.",
            "longDescription": "The version of the component firmware image that this registry applies to.",
            "type": "string"
          }
        }
      },
      "type": "array"
    },
    "RegistryEntries": {
      "additionalProperties": false,
      "description": "Array of all attributes and their metadata for this component.",
      "longDescription": "The value of this property shall be an array containing a list of all attributes for this component, along with their possible values other metadata.",
      "properties": {
        "Attributes": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "CurrentValue": {
                "description": "Placeholder of the current value of the attribute.",
                "longDescription": "Placeholder of the current value of the attribute. The current value of an attribute might be affected by the results of evaluating the 'Dependencies' array.",
                "type": [
                  "string",
                  "integer",
                  "boolean",
                  "null"
                ]
              },
              "DisplayName": {
                "description": "The user-readable display string of the attribute in the defined 'Language'.",
                "longDescription": "The value of this property shall be the user-readable display string of the attribute in the defined 'Language'.",
                "type": "string"
              },
              "DisplayOrder": {
                "description": "The numeric value describing the ascending order that the attribute is displayed relative to other attributes.",
                "longDescription": "The value of this property shall be a number the describes the ascending order in which this attribute is displayed, relative to other attributes.",
                "type": "integer"
              },
              "GrayOut": {
                "description": "The gray-out state of this attribute.",
                "longDescription": "The value of this property shall be a boolean describing the gray-out state of this attribute. When set to true, a grayed-out attribute should be grayed out in user interfaces. But, unlike ReadOnly, the value of grayed-out attributes might still be be modified. The grayout state of an attribute might be affected by the results of evaluating the 'Dependencies' array.",
                "type": "boolean"
              },
              "HelpText": {
                "description": "The help text for the attribute.",
                "longDescription": "The value of this property shall be the help text of the attribute.",
                "type": "string"
              },
              "Immutable": {
                "description": "Defines whether this attribute is immutable or not.",
                "longDescription": "The value of this property shall be a boolean describing the immutable state of this attribute. Immutable attributes should not be modified and are typically used to reflect a hardware state.",
                "type": "boolean"
              },
              "IsSystemUniqueProperty": {
                "description": "Defines whether this attribute is unique for this system and should not be replicated.",
                "longDescription": "The value of this property shall be a boolean describing this attribute is unique or not. A value of true indicates that the attribute is unique and should not be replicated.",
                "type": "boolean"
              },
              "LowerBound": {
                "description": "The lower limit of the value of an attribute of type 'Integer'.",
                "longDescription": "The value of this property shall be a number indicating the lower limit of the value of an attribute of type 'Integer'.",
                "type": "integer"
              },
              "MaxLength": {
                "description": "The maximum character length of the value of an attribute of type 'String'.",
                "longDescription": "The value of this property shall be a number indicating the maximum character length of the value of an attribute of type 'String'.",
                "type": "integer"
              },
              "MenuPath": {
                "description": "A path that describes the menu hierarchy of this attribute.",
                "longDescription": "The value of this property shall be a string indicating the menu hierarchy of this attribute, in the form of a path to the menu names.",
                "pattern": "^[.]?[A-Za-z0-9//]+$",
                "type": "string"
              },
              "MinLength": {
                "description": "The minimum character length of the value of an attribute of type 'String'.",
                "longDescription": "The value of this property shall be a number indicating the minimum character length of the value of an attribute of type 'String'.",
                "type": "integer"
              },
              "AttributeName": {
                "description": "The unique name of the attribute.",
                "longDescription": "The value of this property shall be the name of this attribute that is unique in this registry.",
                "pattern": "^[A-Z][A-Za-z0-9]+$",
                "type": "string"
              },
              "ReadOnly": {
                "description": "The read-only state of this attribute.",
                "longDescription": "The value of this property shall be a boolean describing the read-only state of attribute. A read-only attribute cannot be modified, and should be grayed out in user interfaces. The read-only state of an attribute might be affected by the results of evaluating the 'Dependencies' array.",
                "type": "boolean"
              },
              "ScalarIncrement": {
                "description": "The amount to increment or decrement the value of an attribute of type 'Integer' each time a user requests a value change.",
                "longDescription": "The value of this property shall be a number indicating the amount to increment or decrement the value of an attribute of type 'Integer' each time a user requests a value change. A ScalarIncrement value of 0 indicates a free-form numeric user input.",
                "type": "integer"
              },
              "Type": {
                "description": "The type of the attribute.",
                "enum": [
                  "Enumeration",
                  "String",
                  "Integer",
                  "Boolean",
                  "Password"
                ],
                "enumDescriptions": {
                  "Boolean": "The attributes that are true or false.",
                  "Enumeration": "The attributes that include a list of the known possible enumerated values.",
                  "Integer": "The attributes that have integer numeric values.",
                  "Password": "The attributes that include password values and are not displayed as plain text.",
                  "String": "The attributes that include free form text in their values."
                },
                "longDescription": "The value of this property shall be an enumeration describing type of the attribute.",
                "type": "string"
              },
              "UpperBound": {
                "description": "The upper limit of the value of an attribute of type 'Integer'.",
                "longDescription": "The value of this property shall be a number indicating the upper limit of the value of an attribute of type 'Integer'.",
                "type": "integer"
              },
              "Value": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "ValueDisplayName": {
                      "description": "A user-readable display string of the value of the attribute in the defined 'Language'.",
                      "longDescription": "The value of this property shall be a string representing the user-readable display string of the value of the attribute in the defined 'Language'.",
                      "type": "string"
                    },
                    "ValueName": {
                      "description": "The value name of the attribute.",
                      "longDescription": "The value of this property shall be a string representing the value name of the attribute. ValueName is a unique string within the list of possible values in the 'Value' array of a given attribute.",
                      "pattern": "^[A-Za-z0-9]+$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ValueName"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "ValueExpression": {
                "description": "A regular expression that is used to validate the value of the attribute. This is only applicable to attributes of type 'String' or 'Integer'.",
                "longDescription": "The value of this property shall be a regular expression that is valid according to the Perl regular expression dialect. This string is used to validate the value of the attribute. This is only applicable to attributes of type 'String' or 'Integer'.",
                "type": "string"
              },
              "WarningText": {
                "description": "The warning text for changing the attribute.",
                "longDescription": "The value of this property shall be the warning text of the attribute.",
                "type": "string"
              },
              "WriteOnly": {
                "description": "Defines whether this attribute is write-only. Such attributes revert back to their initial value after settings are applied.",
                "longDescription": "The value of this property shall be a boolean describing the write-only state of this attribute. A write-only attribute reverts back to it's initial value after settings are applied.",
                "type": "boolean"
              }
            },
            "required": [
              "AttribtueName",
              "Type",
              "ReadOnly",
              "CurrentValue"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "Dependencies": {
          "description": "The array containing a list of dependencies of attributes on this component.",
          "items": {
            "additionalProperties": false,
            "properties": {
              "Dependency": {
                "additionalProperties": false,
                "properties": {
                  "MapFrom": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "MapFromAttribute": {
                          "description": "The attribute that is used to evaluate this dependency expression.",
                          "pattern": "^[A-Z][A-Za-z0-9]+$",
                          "type": "string"
                        },
                        "MapFromCondition": {
                          "description": "The condition that is used to evaluate this dependency expression. For example, 'EQU' or 'NEQ'.",
                          "enum": [
                            "EQU",
                            "NEQ",
                            "GTR",
                            "GEQ",
                            "LSS",
                            "LEQ"
                          ],
                          "enumDescriptions": {
                            "NEQ": "The logical operation for 'Not Equal'.",
                            "LSS": "The logical operation for 'Less than'.",
                            "LEQ": "The logical operation for 'Less than or Equal'.",
                            "EQU": "The logical operation for 'Equal'.",
                            "GTR": "The logical operation for 'Greater than'.",
                            "GEQ": "The logical operation for 'Greater than or Equal'."
                          },
                          "type": "string"
                        },
                        "MapFromProperty": {
                          "description": "The attribute specified in MapFromAttribute whose value is used to evaluate this dependency expression.",
                          "enum": [
                            "CurrentValue",
                            "ReadOnly",
                            "GrayOut"
                          ],
                          "enumDescriptions": {
                            "CurrentValue": "The dependency on an attribute's CurrentValue.",
                            "GrayOut": "The dependency on an attribute's GrayOut state.",
                            "ReadOnly": "The dependency on an attribute's ReadOnly state."
                          },
                          "type": "string"
                        },
                        "MapFromValue": {
                          "description": "The value that the property specified in MapToProperty (the attribute specified in MapToAttribute) is changed to if the dependency expression evaluates to true.",
                          "pattern": "^[A-Za-z0-9]+$",
                          "type": [
                            "string",
                            "integer",
                            "boolean"
                          ]
                        },
                        "MapTerms": {
                          "description": "The logical term used to combine multiple conditions in this dependency expression. For example, 'AND' for logical AND, or 'OR' for logical OR of the conditions.",
                          "enum": [
                            "AND",
                            "OR"
                          ],
                          "enumDescriptions": {
                            "AND": "The operation used for logical 'AND' of dependency terms.",
                            "OR": "The operation used for logical 'OR' of dependency terms."
                          },
                          "type": "string"
                        }
                      },
                      "required": [
                        "MapFromAttribute",
                        "MapFromCondition",
                        "MapFromProperty",
                        "MapFromValue"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "MapToAttribute": {
                    "description": "The Name of the attribute that is affected by this dependency expression.",
                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                    "type": "string"
                  },
                  "MapToProperty": {
                    "description": "The property of the attribute specified in MapToAttribute that is affected by this dependency expression (for example, 'CurrentValue' or 'ReadOnly').",
                    "enum": [
                      "CurrentValue",
                      "ReadOnly",
                      "GrayOut",
                      "HelpText",
                      "WarningText",
                      "MaxLength",
                      "MinLength",
                      "UpperBound",
                      "LowerBound",
                      "ScalarIncrement",
                      "ValueExpression"
                    ],
                    "enumDescriptions": {
                      "CurrentValue": "The dependency that affects an attribute's CurrentValue.",
                      "GrayOut": "The dependency that affects an attribute's GrayOut state.",
                      "HelpText": "The dependency that affects an attribute's HelpText.",
                      "LowerBound": "The dependency that affects an attribute's LowerBound.",
                      "MaxLength": "The dependency that affects an attribute's MaxLength.",
                      "MinLength": "The dependency that affects an attribute's MinLength.",
                      "ReadOnly": "The dependency that affects an attribute's ReadOnly state.",
                      "ScalarIncrement": "The dependency that affects an attribute's ScalarIncrement.",
                      "UpperBound": "The dependency that affects an attribute's UpperBound.",
                      "ValueExpression": "The dependency that affects an attribute's ValueExpression.",
                      "WarningText": "The dependency that affects an attribute's WarningText."
                    },
                    "type": "string"
                  },
                  "MapToValue": {
                    "description": "The value that MapToProperty (the attribute specified in MapToAttribute) is changed to if the dependency expression evaluates to true.",
                    "pattern": "^[A-Za-z0-9]+$",
                    "type": [
                      "string",
                      "integer",
                      "boolean"
                    ]
                  }
                },
                "type": "object"
              },
              "DependencyFor": {
                "description": "The Name of the parent attribute whose value change triggers the evaluation of this dependency expression.",
                "pattern": "^[A-Z][A-Za-z0-9]+$",
                "type": "string"
              },
              "Type": {
                "description": "The type of the dependency structure.",
                "enum": [
                  "Map"
                ],
                "enumDescriptions": {
                  "Map": "A simple mapping dependency. The attribute value or state is changed to the mapped value if the condition evaluates to true."
                },
                "type": "string"
              }
            },
            "required": [
              "DependencyFor",
              "Dependency",
              "Type"
            ],
            "type": "object"
          },
          "longDescription": "The value of this property shall be an array containing a list of dependencies of attributes on this component.",
          "required": [
            "Type"
          ],
          "type": "array"
        },
        "Menus": {
          "description": "The array containing the attributes menus and their hierarchy.",
          "items": {
            "additionalProperties": false,
            "properties": {
              "DisplayName": {
                "description": "The user-readable display string of this menu in the defined 'Language'.",
                "longDescription": "The value of this property shall be the user-readable display string of the menu in the defined 'Language'.",
                "type": "string"
              },
              "DisplayOrder": {
                "description": "The numeric value describing the ascending order in which this menu is displayed relative to other menus.",
                "longDescription": "The value of this property shall be a number the describes the ascending order in which this menu is displayed, relative to other menus.",
                "type": "integer"
              },
              "GrayOut": {
                "description": "The gray-out state of this menu. A grayed-only menu is not accessible in user interfaces.",
                "longDescription": "The value of this property shall be a boolean describing the gray-out state of this menu. When set to true, a grayed-only menu is not accessible in user interfaces.",
                "type": "boolean"
              },
              "MenuPath": {
                "description": "A path that describes this menu hierarchy relative to other menus.",
                "longDescription": "The value of this property shall be a string indicating the menu hierarchy of this menu, in the form of a path to the menu names.",
                "pattern": "^[.]?[A-Za-z0-9//]+$",
                "type": "string"
              },
              "MenuName": {
                "description": "The unique name string of this menu.",
                "longDescription": "The value of this property shall be the name of this menu that is unique in this registry.",
                "pattern": "^[A-Z][A-Za-z0-9]+$",
                "type": "string"
              },
              "ReadOnly": {
                "description": "The read-only state of this menu.",
                "longDescription": "The value of this property shall be a boolean describing the read-only state of this menu. A read-only menu is not accessible in user interfaces, and all properties contained in that menu and its sub-menus become read-only.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "longDescription": "The value of this property shall be an array containing the attributes menus and their hierarchy.",
          "required": [
            "MenuName",
            "ReadOnly"
          ],
          "type": "array"
        }
      },
      "required": [
        "Attributes"
      ],
      "type": "object"
    }
  },
  "required": [
    "Language",
    "RegistryPrefix",
    "RegistryVersion",
    "OwningEntity",
    "RegistryEntries"
  ],
  "title": "#AttributeRegistry.1.0.0.AttributeRegistry"
}
